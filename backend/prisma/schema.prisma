// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                  Int                  @id @default(autoincrement())
  fullName            String
  phoneNumber         String
  email               String               @unique
  password            String
  role                UserRole             @default(CUSTOMER)
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime?            @updatedAt
  bookings            Booking[]
  locations           Location[]
  passwordResetTokens PasswordResetToken[]
  reviews             Review[]
  receivedReviews     Review[]             @relation("TechnicianReviews")
  technicianDetails   TechnicianDetails?

  @@index([email])
  @@index([role])
  @@map("users")
}

// Password Reset Token model
model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Foreign key relationship
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("password_reset_tokens")
}

// Location model (customer addresses)
model Location {
  id           Int       @id @default(autoincrement())
  customerId   Int
  addressName  String? // e.g., "Home", "Office", "Apartment"
  description  String // Detailed address description
  googleMapUrl String?
  latitude     Decimal   @db.Decimal()
  longitude    Decimal   @db.Decimal()
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  bookings     Booking[]
  customer     Users     @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@map("locations")
}

// Supporting Technician Details model
model TechnicianDetails {
  id             Int                      @id @default(autoincrement())
  userId         Int                      @unique
  gender         String
  age            Int
  dateOfBirth    DateTime
  experience     String
  specialization String
  imageUrl       String?
  certificateUrl String
  isAvailable    Boolean                  @default(true)
  rate           Int                      @default(0)
  approvalStatus TechnicianApprovalStatus @default(PENDING)
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime?                @updatedAt
  bookings       Booking[]
  availabilities TechnicianAvailability[]
  user           Users                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  services       Service[]                @relation("ServiceToTechnicianDetails")

  @@index([userId])
  @@index([approvalStatus])
  @@map("technician_details")
}

// Category model (managed by admin)
model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  services  Service[]

  @@index([name])
  @@map("categories")
}

// Time Slot model (predefined time slots for bookings)
model TimeSlot {
  id                       Int                      @id @default(autoincrement())
  name                     String                   @unique
  date                     DateTime                 @db.Date
  startTime                DateTime                 @db.Time()
  endTime                  DateTime                 @db.Time()
  type                     TimeSlotType             @default(MORNING)
  isActive                 Boolean                  @default(true)
  isBookable               Boolean                  @default(true)
  /// Duration in minutes (120 for 2 hours)
  duration                 Int
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime?                @updatedAt
  technicianAvailabilities TechnicianAvailability[]

  @@index([isActive])
  @@index([isBookable])
  @@map("time_slots")
}

// Service model (created by technicians)
model Service {
  id          Int                 @id @default(autoincrement())
  serviceName String
  description String
  duration    String?
  imageUrl    String?
  categoryId  Int
  price       Decimal             @default(0) @db.Decimal(10, 2)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime?           @updatedAt
  bookings    Booking[]
  category    Category            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  technicians TechnicianDetails[] @relation("ServiceToTechnicianDetails")

  @@map("services")
}

// Technician Availability Schedule
model TechnicianAvailability {
  id            Int                @id @default(autoincrement())
  technicianId  Int
  timeSlotId    Int // Links to predefined time slot
  date          DateTime           @db.Date
  status        AvailabilityStatus @default(AVAILABLE)
  isBookedUntil DateTime? // When the 2-hour booking expires
  createdAt     DateTime           @default(now())
  updatedAt     DateTime?          @updatedAt
  booking       Booking?
  technician    TechnicianDetails  @relation(fields: [technicianId], references: [id], onDelete: Cascade)
  timeSlot      TimeSlot           @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)

  @@unique([technicianId, date, timeSlotId])
  @@index([technicianId, status])
  @@index([date, status])
  @@map("technician_availabilities")
}

// Main Booking model
model Booking {
  id                 Int                    @id @default(autoincrement())
  customerId         Int
  technicianId       Int
  serviceId          Int
  locationId         Int?
  availabilityId     Int                    @unique
  scheduledDate      DateTime?
  duration           Int
  totalPrice         Decimal                @db.Decimal(10, 2)
  status             BookingStatus          @default(CART)
  cartExpiresAt      DateTime?
  customerNotes      String?
  technicianNotes    String?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime?              @updatedAt
  confirmedAt        DateTime?
  scheduledAt        DateTime?
  completedAt        DateTime?
  cancelledAt        DateTime?
  cancellationReason String?
  availability       TechnicianAvailability @relation(fields: [availabilityId], references: [id])
  customer           Users                  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  location           Location?              @relation(fields: [locationId], references: [id])
  service            Service                @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  technician         TechnicianDetails      @relation(fields: [technicianId], references: [id], onDelete: Cascade)
  review             Review?

  @@index([customerId])
  @@index([technicianId])
  @@index([serviceId])
  @@index([locationId])
  @@index([status])
  @@map("bookings")
}

model Review {
  id           Int       @id @default(autoincrement())
  bookingId    Int       @unique
  customerId   Int
  technicianId Int
  rating       Int // 1-5 stars
  comment      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  booking      Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  customer     Users     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  technician   Users     @relation("TechnicianReviews", fields: [technicianId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([customerId])
  @@index([technicianId])
  @@map("reviews")
}

enum UserRole {
  ADMIN
  TECHNICIAN
  CUSTOMER
}

enum TechnicianApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  CART
  CONFIRMED
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AvailabilityStatus {
  AVAILABLE
  BOOKED
  UNAVAILABLE
}

enum TimeSlotType {
  MORNING
  AFTERNOON
  EVENING
  LUNCH_BREAK
}
