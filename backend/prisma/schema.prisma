// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum UserRole {
  ADMIN
  TECHNICIAN
  CUSTOMER
}

// Enum  for technician approval status
enum TechnicianApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

// Enum for booking status
enum BookingStatus {
  CART
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REJECTED
}

// Enum for service categories
enum ServiceCategory {
  COMPUTER_REPAIR
  LAPTOP_REPAIR
  PHONE_REPAIR
  TABLET_REPAIR
  NETWORK_SETUP
  SOFTWARE_INSTALLATION
  DATA_RECOVERY
  VIRUS_REMOVAL
  HARDWARE_UPGRADE
  CONSULTATION
}

//Main user model
model Users {
  id          Int       @id @default(autoincrement())
  fullName    String
  phoneNumber String
  email       String    @unique
  password    String
  role        UserRole  @default(CUSTOMER)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  technicianDetails TechnicianDetails?
  passwordResetTokens PasswordResetToken[]
  customerBookings Booking[] @relation("CustomerBookings")
  technicianBookings Booking[] @relation("TechnicianBookings")
  technicianAvailability TechnicianAvailability[]

  @@map("users")
}

// Password Reset Token model
model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Foreign key relationship
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

// Supporting  Technician Details model
model TechnicianDetails {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  gender          String
  age             Int
  DateOfBirth     DateTime
  experience      String
  specialization  String
  imageUtl        String?
  certificateUrl  String
  isAvailable     Boolean  @default(true)
  rate            Int      @default(0)
  approvalStatus TechnicianApprovalStatus @default(PENDING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Foreign key relationship
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("technician_details")
}

// Booking model
model Booking {
  id          Int      @id @default(autoincrement())
  customerId  Int
  technicianId Int?
  title       String
  description String
  category    ServiceCategory
  status      BookingStatus @default(PENDING)
  scheduledAt DateTime?
  completedAt DateTime?
  estimatedHours Int?
  actualHours Int?
  location    String
  price       Decimal? @db.Decimal(10,2)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  customer Users @relation("CustomerBookings", fields: [customerId], references: [id], onDelete: Cascade)
  technician Users? @relation("TechnicianBookings", fields: [technicianId], references: [id], onDelete: SetNull)
  bookingServices BookingService[]

  @@map("bookings")
}

// Technician Availability model
model TechnicianAvailability {
  id          Int      @id @default(autoincrement())
  technicianId Int
  dayOfWeek   Int      // 0 = Sunday, 1 = Monday, etc.
  startTime   String   // "09:00"
  endTime     String   // "17:00"
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  technician Users @relation(fields: [technicianId], references: [id], onDelete: Cascade)

  @@unique([technicianId, dayOfWeek])
  @@map("technician_availability")
}

// Service model
model Service {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  category    ServiceCategory
  price       Decimal  @db.Decimal(10,2)
  duration    Int      // Duration in minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookingServices BookingService[]

  @@map("services")
}

// BookingService junction table
model BookingService {
  id          Int      @id @default(autoincrement())
  bookingId   Int
  serviceId   Int
  quantity    Int      @default(1)
  price       Decimal  @db.Decimal(10,2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([bookingId, serviceId])
  @@map("booking_services")
}
