// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum UserRole {
  ADMIN
  TECHNICIAN
  CUSTOMER
}

// Enum for technician approval status
enum TechnicianApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

// Enum for booking status
enum BookingStatus {
  CART          // Initial state when customer adds to cart
  CONFIRMED     // After customer confirms booking
  SCHEDULED     // When technician accepts and schedules
  IN_PROGRESS   // Service is being performed
  COMPLETED     // Service completed successfully
  CANCELLED     // Cancelled by customer or technician
  EXPIRED       // Booking expired (after 2 hours in cart)
}

// Enum for payment status
enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Enum for availability status
enum AvailabilityStatus {
  AVAILABLE
  BOOKED
  UNAVAILABLE
}

// Enum for time slot types
enum TimeSlotType {
  MORNING
  AFTERNOON
  EVENING
  LUNCH_BREAK
}

//Main user model
model Users {
  id          Int       @id @default(autoincrement())
  fullName    String
  phoneNumber String
  email       String    @unique
  password    String
  role        UserRole  @default(CUSTOMER)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  technicianDetails TechnicianDetails?
  passwordResetTokens PasswordResetToken[]
  bookings Booking[] // Customer bookings
  reviews Review[]   // Reviews given by customers
  receivedReviews Review[] @relation("TechnicianReviews") // Reviews received by technicians
  locations Location[] // Customer addresses

  @@index([email])
  @@index([role])
  @@map("users")
}

// Password Reset Token model
model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Foreign key relationship
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("password_reset_tokens")
}

// Location model (customer addresses)
model Location {
  id            Int      @id @default(autoincrement())
  customerId    Int
  addressName   String?  // e.g., "Home", "Office", "Apartment"
  description   String   // Detailed address description
  district      String
  province      String
  googleMapUrl  String?  // Optional Google Maps location URL
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Foreign key relationship
  customer Users @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Relations
  bookings Booking[] // Bookings at this location

  @@index([customerId])
  @@map("locations")
}

// Supporting Technician Details model
model TechnicianDetails {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  gender          String
  age             Int
  dateOfBirth     DateTime
  experience      String
  specialization  String
  imageUrl        String?
  certificateUrl  String
  isAvailable     Boolean  @default(true)
  rate            Int      @default(0)
  approvalStatus TechnicianApprovalStatus @default(PENDING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Foreign key relationship
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Many-to-many relationship with services (technicians create services)
  services Service[]
  
  // Technician availability schedule
  availabilities TechnicianAvailability[]
  
  // Bookings for this technician
  bookings Booking[]

  @@index([userId])
  @@index([approvalStatus])
  @@map("technician_details")
}

// Category model (managed by admin)
model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // One-to-many relationship with services
  services Service[]

  @@index([name])
  @@map("categories")
}

// Time Slot model (predefined time slots for bookings)
model TimeSlot {
  id          Int      @id @default(autoincrement())
  name        String   @unique // e.g., "9:00 AM - 11:00 AM"
  date        DateTime @db.Date() // e.g., "2023-09-15"
  startTime   DateTime @db.Time()   // e.g., "09:00"
  endTime     DateTime @db.Time()  // e.g., "11:00"
  type        TimeSlotType @default(MORNING)
  isActive    Boolean  @default(true)
  isBookable  Boolean  @default(true) // false for lunch break
  duration    Int      /// Duration in minutes (120 for 2 hours)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  technicianAvailabilities TechnicianAvailability[]
  
  @@index([isActive])
  @@index([isBookable])
  @@map("time_slots")
}

// Service model (created by technicians)
model Service {
  id            Int     @id @default(autoincrement())
  serviceName   String
  description   String
  categoryId    Int
  price         Decimal @default(0) @db.Decimal(10, 2) // Technician sets their own price
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Foreign key relationship with category
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Many-to-many relationship with technicians (who created/offer this service)
  technicians TechnicianDetails[]
  
  // Bookings for this service
  bookings Booking[]

 
  @@map("services")
}

// Technician Availability Schedule
model TechnicianAvailability {
  id            Int      @id @default(autoincrement())
  technicianId  Int
  timeSlotId    Int      // Links to predefined time slot
  date          DateTime @db.Date
  status        AvailabilityStatus @default(AVAILABLE)
  isBookedUntil DateTime? // When the 2-hour booking expires
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Foreign key relationships
  technician TechnicianDetails @relation(fields: [technicianId], references: [id], onDelete: Cascade)
  timeSlot   TimeSlot @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  
  // Booking that occupies this slot (if any)
  booking Booking?

  @@unique([technicianId, date, timeSlotId])
  @@index([technicianId, status])
  @@index([date, status])
  @@map("technician_availabilities")
}

// Main Booking model
model Booking {
  id                Int         @id @default(autoincrement())
  customerId        Int
  technicianId      Int
  serviceId         Int
  locationId        Int?        // Optional location for the service
  availabilityId    Int       @unique // Links to specific availability slot
  
  // Booking details
  scheduledDate     DateTime?   // When the service is scheduled
  duration          Int         // Duration in minutes (from time slot)
  totalPrice        Decimal     @db.Decimal(10, 2)
  
  // Status and timestamps
  status            BookingStatus @default(CART)
  cartExpiresAt     DateTime?   // Cart expires after 2 hours
  
  // Additional details
  customerNotes     String?     // Special instructions from customer
  technicianNotes   String?     // Notes from technician
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  confirmedAt       DateTime?   // When customer confirmed booking
  scheduledAt       DateTime?   // When technician scheduled the service
  completedAt       DateTime?   // When service was completed
  cancelledAt       DateTime?   // When booking was cancelled
  cancellationReason String?    // Reason for cancellation

  // Foreign key relationships
  customer     Users @relation(fields: [customerId], references: [id], onDelete: Cascade)
  technician   TechnicianDetails @relation(fields: [technicianId], references: [id], onDelete: Cascade)
  service      Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  location     Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  availability TechnicianAvailability @relation(fields: [availabilityId], references: [id])
  
  
  review  Review?

  @@index([customerId])
  @@index([technicianId])
  @@index([serviceId])
  @@index([locationId])
  @@index([status])
  @@map("bookings")
}

// // Payment model
// model Payment {
//   id            Int           @id @default(autoincrement())
//   bookingId     Int           @unique
//   customerId    Int
//   amount        Decimal       @db.Decimal(10, 2)
//   currency      String        @default("USD")
//   status        PaymentStatus @default(PENDING)
  
//   // Payment gateway details
//   paymentMethod String?       // credit_card, paypal, etc.
//   transactionId String?       // Payment gateway transaction ID
//   gatewayResponse Json?       // Store gateway response for debugging
  
//   createdAt     DateTime      @default(now())
//   updatedAt     DateTime      @updatedAt
//   paidAt        DateTime?     // When payment was successful
//   refundedAt    DateTime?     // When payment was refunded

//   // Foreign key relationships
//   booking  Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
//   customer Users @relation(fields: [customerId], references: [id], onDelete: Cascade)

//   @@index([bookingId])
//   @@index([customerId])
//   @@index([status])
//   @@map("payments")
// }

// Review and Rating system
model Review {
  id           Int      @id @default(autoincrement())
  bookingId    Int      @unique
  customerId   Int
  technicianId Int
  rating       Int      // 1-5 stars
  comment      String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Foreign key relationships
  booking    Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  customer   Users @relation(fields: [customerId], references: [id], onDelete: Cascade)
  technician Users @relation("TechnicianReviews", fields: [technicianId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([customerId])
  @@index([technicianId])
  @@map("reviews")
}